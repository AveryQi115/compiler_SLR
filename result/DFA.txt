I0= [【P -> . N declare_list 】【N -> . 】]

I1= [【P -> N . declare_list 】【declare_list -> . declare declare_list 】【declare_list -> . declare 】【declare -> . int ID M A function_declare 】【declare -> . int ID var_declare 】【declare -> . void ID M A function_declare 】【declare -> . int ID array_declare_list 】]

I2= [【P -> N declare_list . 】]

I3= [【declare_list -> . declare declare_list 】【declare_list -> declare . declare_list 】【declare_list -> . declare 】【declare_list -> declare . 】【declare -> . int ID M A function_declare 】【declare -> . int ID var_declare 】【declare -> . void ID M A function_declare 】【declare -> . int ID array_declare_list 】]

I4= [【declare -> int . ID M A function_declare 】【declare -> int . ID var_declare 】【declare -> int . ID array_declare_list 】]

I5= [【declare -> void . ID M A function_declare 】]

I6= [【declare_list -> declare declare_list . 】]

I7= [【declare -> int ID . M A function_declare 】【declare -> int ID . var_declare 】【var_declare -> . ; 】【M -> . 】【declare -> int ID . array_declare_list 】【array_declare_list -> . array_declare array_declare_list 】【array_declare_list -> . array_declare ; 】【array_declare -> . [ NUM ] 】]

I8= [【declare -> void ID . M A function_declare 】【M -> . 】]

I9= [【declare -> int ID M . A function_declare 】【A -> . 】]

I10= [【declare -> int ID var_declare . 】]

I11= [【var_declare -> ; . 】]

I12= [【declare -> int ID array_declare_list . 】]

I13= [【array_declare_list -> . array_declare array_declare_list 】【array_declare_list -> array_declare . array_declare_list 】【array_declare_list -> . array_declare ; 】【array_declare_list -> array_declare . ; 】【array_declare -> . [ NUM ] 】]

I14= [【array_declare -> [ . NUM ] 】]

I15= [【declare -> void ID M . A function_declare 】【A -> . 】]

I16= [【declare -> int ID M A . function_declare 】【function_declare -> . ( parameter ) sentence_block 】]

I17= [【array_declare_list -> array_declare array_declare_list . 】]

I18= [【array_declare_list -> array_declare ; . 】]

I19= [【array_declare -> [ NUM . ] 】]

I20= [【declare -> void ID M A . function_declare 】【function_declare -> . ( parameter ) sentence_block 】]

I21= [【declare -> int ID M A function_declare . 】]

I22= [【function_declare -> ( . parameter ) sentence_block 】【parameter -> . parameter_list 】【parameter -> . void 】【parameter_list -> . param 】【parameter_list -> . param , parameter_list 】【param -> . int ID 】]

I23= [【array_declare -> [ NUM ] . 】]

I24= [【declare -> void ID M A function_declare . 】]

I25= [【function_declare -> ( parameter . ) sentence_block 】]

I26= [【parameter -> parameter_list . 】]

I27= [【parameter -> void . 】]

I28= [【parameter_list -> param . 】【parameter_list -> param . , parameter_list 】]

I29= [【param -> int . ID 】]

I30= [【function_declare -> ( parameter ) . sentence_block 】【sentence_block -> . { inner_declare sentence_list } 】]

I31= [【parameter_list -> . param 】【parameter_list -> . param , parameter_list 】【parameter_list -> param , . parameter_list 】【param -> . int ID 】]

I32= [【param -> int ID . 】]

I33= [【function_declare -> ( parameter ) sentence_block . 】]

I34= [【sentence_block -> { . inner_declare sentence_list } 】【inner_declare -> . 】【inner_declare -> . inner_var_declare ; inner_declare 】【inner_var_declare -> . int ID 】]

I35= [【parameter_list -> param , parameter_list . 】]

I36= [【sentence_block -> { inner_declare . sentence_list } 】【sentence_list -> . sentence M sentence_list 】【sentence_list -> . sentence 】【sentence -> . if_sentence 】【sentence -> . while_sentence 】【sentence -> . return_sentence 】【sentence -> . assign_sentence 】【assign_sentence -> . ID = expression ; 】【return_sentence -> . return ; 】【return_sentence -> . return expression ; 】【while_sentence -> . while M ( expression ) A sentence_block 】【if_sentence -> . if ( expression ) A sentence_block 】【if_sentence -> . if ( expression ) A sentence_block N else M A sentence_block 】【assign_sentence -> . array = expression ; 】【array -> . ID index_list 】]

I37= [【inner_declare -> inner_var_declare . ; inner_declare 】]

I38= [【inner_var_declare -> int . ID 】]

I39= [【sentence_block -> { inner_declare sentence_list . } 】]

I40= [【sentence_list -> sentence . M sentence_list 】【sentence_list -> sentence . 】【M -> . 】]

I41= [【sentence -> if_sentence . 】]

I42= [【sentence -> while_sentence . 】]

I43= [【sentence -> return_sentence . 】]

I44= [【sentence -> assign_sentence . 】]

I45= [【assign_sentence -> ID . = expression ; 】【array -> ID . index_list 】【index_list -> . [ expression ] index_list 】【index_list -> . [ expression ] 】]

I46= [【return_sentence -> return . ; 】【return_sentence -> return . expression ; 】【expression -> . add_expression 】【expression -> . add_expression > add_expression 】【expression -> . add_expression < add_expression 】【expression -> . add_expression == add_expression 】【expression -> . add_expression >= add_expression 】【expression -> . add_expression <= add_expression 】【expression -> . add_expression != add_expression 】【add_expression -> . item 】【add_expression -> . item + add_expression 】【add_expression -> . item - add_expression 】【item -> . factor 】【item -> . factor * item 】【item -> . factor / item 】【factor -> . NUM 】【factor -> . ( expression ) 】【factor -> . ID ( argument_list ) 】【factor -> . ID 】【factor -> . array 】【array -> . ID index_list 】]

I47= [【while_sentence -> while . M ( expression ) A sentence_block 】【M -> . 】]

I48= [【if_sentence -> if . ( expression ) A sentence_block 】【if_sentence -> if . ( expression ) A sentence_block N else M A sentence_block 】]

I49= [【assign_sentence -> array . = expression ; 】]

I50= [【inner_declare -> . 】【inner_declare -> . inner_var_declare ; inner_declare 】【inner_declare -> inner_var_declare ; . inner_declare 】【inner_var_declare -> . int ID 】]

I51= [【inner_var_declare -> int ID . 】]

I52= [【sentence_block -> { inner_declare sentence_list } . 】]

I53= [【sentence_list -> . sentence M sentence_list 】【sentence_list -> sentence M . sentence_list 】【sentence_list -> . sentence 】【sentence -> . if_sentence 】【sentence -> . while_sentence 】【sentence -> . return_sentence 】【sentence -> . assign_sentence 】【assign_sentence -> . ID = expression ; 】【return_sentence -> . return ; 】【return_sentence -> . return expression ; 】【while_sentence -> . while M ( expression ) A sentence_block 】【if_sentence -> . if ( expression ) A sentence_block 】【if_sentence -> . if ( expression ) A sentence_block N else M A sentence_block 】【assign_sentence -> . array = expression ; 】【array -> . ID index_list 】]

I54= [【assign_sentence -> ID = . expression ; 】【expression -> . add_expression 】【expression -> . add_expression > add_expression 】【expression -> . add_expression < add_expression 】【expression -> . add_expression == add_expression 】【expression -> . add_expression >= add_expression 】【expression -> . add_expression <= add_expression 】【expression -> . add_expression != add_expression 】【add_expression -> . item 】【add_expression -> . item + add_expression 】【add_expression -> . item - add_expression 】【item -> . factor 】【item -> . factor * item 】【item -> . factor / item 】【factor -> . NUM 】【factor -> . ( expression ) 】【factor -> . ID ( argument_list ) 】【factor -> . ID 】【factor -> . array 】【array -> . ID index_list 】]

I55= [【array -> ID index_list . 】]

I56= [【expression -> . add_expression 】【expression -> . add_expression > add_expression 】【expression -> . add_expression < add_expression 】【expression -> . add_expression == add_expression 】【expression -> . add_expression >= add_expression 】【expression -> . add_expression <= add_expression 】【expression -> . add_expression != add_expression 】【add_expression -> . item 】【add_expression -> . item + add_expression 】【add_expression -> . item - add_expression 】【item -> . factor 】【item -> . factor * item 】【item -> . factor / item 】【factor -> . NUM 】【factor -> . ( expression ) 】【factor -> . ID ( argument_list ) 】【factor -> . ID 】【factor -> . array 】【array -> . ID index_list 】【index_list -> [ . expression ] index_list 】【index_list -> [ . expression ] 】]

I57= [【return_sentence -> return ; . 】]

I58= [【return_sentence -> return expression . ; 】]

I59= [【expression -> add_expression . 】【expression -> add_expression . > add_expression 】【expression -> add_expression . < add_expression 】【expression -> add_expression . == add_expression 】【expression -> add_expression . >= add_expression 】【expression -> add_expression . <= add_expression 】【expression -> add_expression . != add_expression 】]

I60= [【add_expression -> item . 】【add_expression -> item . + add_expression 】【add_expression -> item . - add_expression 】]

I61= [【item -> factor . 】【item -> factor . * item 】【item -> factor . / item 】]

I62= [【factor -> NUM . 】]

I63= [【expression -> . add_expression 】【expression -> . add_expression > add_expression 】【expression -> . add_expression < add_expression 】【expression -> . add_expression == add_expression 】【expression -> . add_expression >= add_expression 】【expression -> . add_expression <= add_expression 】【expression -> . add_expression != add_expression 】【add_expression -> . item 】【add_expression -> . item + add_expression 】【add_expression -> . item - add_expression 】【item -> . factor 】【item -> . factor * item 】【item -> . factor / item 】【factor -> . NUM 】【factor -> . ( expression ) 】【factor -> ( . expression ) 】【factor -> . ID ( argument_list ) 】【factor -> . ID 】【factor -> . array 】【array -> . ID index_list 】]

I64= [【factor -> ID . ( argument_list ) 】【factor -> ID . 】【array -> ID . index_list 】【index_list -> . [ expression ] index_list 】【index_list -> . [ expression ] 】]

I65= [【factor -> array . 】]

I66= [【while_sentence -> while M . ( expression ) A sentence_block 】]

I67= [【if_sentence -> if ( . expression ) A sentence_block 】【if_sentence -> if ( . expression ) A sentence_block N else M A sentence_block 】【expression -> . add_expression 】【expression -> . add_expression > add_expression 】【expression -> . add_expression < add_expression 】【expression -> . add_expression == add_expression 】【expression -> . add_expression >= add_expression 】【expression -> . add_expression <= add_expression 】【expression -> . add_expression != add_expression 】【add_expression -> . item 】【add_expression -> . item + add_expression 】【add_expression -> . item - add_expression 】【item -> . factor 】【item -> . factor * item 】【item -> . factor / item 】【factor -> . NUM 】【factor -> . ( expression ) 】【factor -> . ID ( argument_list ) 】【factor -> . ID 】【factor -> . array 】【array -> . ID index_list 】]

I68= [【expression -> . add_expression 】【expression -> . add_expression > add_expression 】【expression -> . add_expression < add_expression 】【expression -> . add_expression == add_expression 】【expression -> . add_expression >= add_expression 】【expression -> . add_expression <= add_expression 】【expression -> . add_expression != add_expression 】【add_expression -> . item 】【add_expression -> . item + add_expression 】【add_expression -> . item - add_expression 】【item -> . factor 】【item -> . factor * item 】【item -> . factor / item 】【factor -> . NUM 】【factor -> . ( expression ) 】【factor -> . ID ( argument_list ) 】【factor -> . ID 】【assign_sentence -> array = . expression ; 】【factor -> . array 】【array -> . ID index_list 】]

I69= [【inner_declare -> inner_var_declare ; inner_declare . 】]

I70= [【sentence_list -> sentence M sentence_list . 】]

I71= [【assign_sentence -> ID = expression . ; 】]

I72= [【index_list -> [ expression . ] index_list 】【index_list -> [ expression . ] 】]

I73= [【return_sentence -> return expression ; . 】]

I74= [【expression -> add_expression > . add_expression 】【add_expression -> . item 】【add_expression -> . item + add_expression 】【add_expression -> . item - add_expression 】【item -> . factor 】【item -> . factor * item 】【item -> . factor / item 】【factor -> . NUM 】【factor -> . ( expression ) 】【factor -> . ID ( argument_list ) 】【factor -> . ID 】【factor -> . array 】【array -> . ID index_list 】]

I75= [【expression -> add_expression < . add_expression 】【add_expression -> . item 】【add_expression -> . item + add_expression 】【add_expression -> . item - add_expression 】【item -> . factor 】【item -> . factor * item 】【item -> . factor / item 】【factor -> . NUM 】【factor -> . ( expression ) 】【factor -> . ID ( argument_list ) 】【factor -> . ID 】【factor -> . array 】【array -> . ID index_list 】]

I76= [【expression -> add_expression == . add_expression 】【add_expression -> . item 】【add_expression -> . item + add_expression 】【add_expression -> . item - add_expression 】【item -> . factor 】【item -> . factor * item 】【item -> . factor / item 】【factor -> . NUM 】【factor -> . ( expression ) 】【factor -> . ID ( argument_list ) 】【factor -> . ID 】【factor -> . array 】【array -> . ID index_list 】]

I77= [【expression -> add_expression >= . add_expression 】【add_expression -> . item 】【add_expression -> . item + add_expression 】【add_expression -> . item - add_expression 】【item -> . factor 】【item -> . factor * item 】【item -> . factor / item 】【factor -> . NUM 】【factor -> . ( expression ) 】【factor -> . ID ( argument_list ) 】【factor -> . ID 】【factor -> . array 】【array -> . ID index_list 】]

I78= [【expression -> add_expression <= . add_expression 】【add_expression -> . item 】【add_expression -> . item + add_expression 】【add_expression -> . item - add_expression 】【item -> . factor 】【item -> . factor * item 】【item -> . factor / item 】【factor -> . NUM 】【factor -> . ( expression ) 】【factor -> . ID ( argument_list ) 】【factor -> . ID 】【factor -> . array 】【array -> . ID index_list 】]

I79= [【expression -> add_expression != . add_expression 】【add_expression -> . item 】【add_expression -> . item + add_expression 】【add_expression -> . item - add_expression 】【item -> . factor 】【item -> . factor * item 】【item -> . factor / item 】【factor -> . NUM 】【factor -> . ( expression ) 】【factor -> . ID ( argument_list ) 】【factor -> . ID 】【factor -> . array 】【array -> . ID index_list 】]

I80= [【add_expression -> . item 】【add_expression -> . item + add_expression 】【add_expression -> item + . add_expression 】【add_expression -> . item - add_expression 】【item -> . factor 】【item -> . factor * item 】【item -> . factor / item 】【factor -> . NUM 】【factor -> . ( expression ) 】【factor -> . ID ( argument_list ) 】【factor -> . ID 】【factor -> . array 】【array -> . ID index_list 】]

I81= [【add_expression -> . item 】【add_expression -> . item + add_expression 】【add_expression -> . item - add_expression 】【add_expression -> item - . add_expression 】【item -> . factor 】【item -> . factor * item 】【item -> . factor / item 】【factor -> . NUM 】【factor -> . ( expression ) 】【factor -> . ID ( argument_list ) 】【factor -> . ID 】【factor -> . array 】【array -> . ID index_list 】]

I82= [【item -> . factor 】【item -> . factor * item 】【item -> factor * . item 】【item -> . factor / item 】【factor -> . NUM 】【factor -> . ( expression ) 】【factor -> . ID ( argument_list ) 】【factor -> . ID 】【factor -> . array 】【array -> . ID index_list 】]

I83= [【item -> . factor 】【item -> . factor * item 】【item -> . factor / item 】【item -> factor / . item 】【factor -> . NUM 】【factor -> . ( expression ) 】【factor -> . ID ( argument_list ) 】【factor -> . ID 】【factor -> . array 】【array -> . ID index_list 】]

I84= [【factor -> ( expression . ) 】]

I85= [【expression -> . add_expression 】【expression -> . add_expression > add_expression 】【expression -> . add_expression < add_expression 】【expression -> . add_expression == add_expression 】【expression -> . add_expression >= add_expression 】【expression -> . add_expression <= add_expression 】【expression -> . add_expression != add_expression 】【add_expression -> . item 】【add_expression -> . item + add_expression 】【add_expression -> . item - add_expression 】【item -> . factor 】【item -> . factor * item 】【item -> . factor / item 】【factor -> . NUM 】【factor -> . ( expression ) 】【factor -> . ID ( argument_list ) 】【factor -> ID ( . argument_list ) 】【factor -> . ID 】【argument_list -> . 】【argument_list -> . expression 】【argument_list -> . expression , argument_list 】【factor -> . array 】【array -> . ID index_list 】]

I86= [【while_sentence -> while M ( . expression ) A sentence_block 】【expression -> . add_expression 】【expression -> . add_expression > add_expression 】【expression -> . add_expression < add_expression 】【expression -> . add_expression == add_expression 】【expression -> . add_expression >= add_expression 】【expression -> . add_expression <= add_expression 】【expression -> . add_expression != add_expression 】【add_expression -> . item 】【add_expression -> . item + add_expression 】【add_expression -> . item - add_expression 】【item -> . factor 】【item -> . factor * item 】【item -> . factor / item 】【factor -> . NUM 】【factor -> . ( expression ) 】【factor -> . ID ( argument_list ) 】【factor -> . ID 】【factor -> . array 】【array -> . ID index_list 】]

I87= [【if_sentence -> if ( expression . ) A sentence_block 】【if_sentence -> if ( expression . ) A sentence_block N else M A sentence_block 】]

I88= [【assign_sentence -> array = expression . ; 】]

I89= [【assign_sentence -> ID = expression ; . 】]

I90= [【index_list -> . [ expression ] index_list 】【index_list -> [ expression ] . index_list 】【index_list -> . [ expression ] 】【index_list -> [ expression ] . 】]

I91= [【expression -> add_expression > add_expression . 】]

I92= [【expression -> add_expression < add_expression . 】]

I93= [【expression -> add_expression == add_expression . 】]

I94= [【expression -> add_expression >= add_expression . 】]

I95= [【expression -> add_expression <= add_expression . 】]

I96= [【expression -> add_expression != add_expression . 】]

I97= [【add_expression -> item + add_expression . 】]

I98= [【add_expression -> item - add_expression . 】]

I99= [【item -> factor * item . 】]

I100= [【item -> factor / item . 】]

I101= [【factor -> ( expression ) . 】]

I102= [【factor -> ID ( argument_list . ) 】]

I103= [【argument_list -> expression . 】【argument_list -> expression . , argument_list 】]

I104= [【while_sentence -> while M ( expression . ) A sentence_block 】]

I105= [【A -> . 】【if_sentence -> if ( expression ) . A sentence_block 】【if_sentence -> if ( expression ) . A sentence_block N else M A sentence_block 】]

I106= [【assign_sentence -> array = expression ; . 】]

I107= [【index_list -> [ expression ] index_list . 】]

I108= [【factor -> ID ( argument_list ) . 】]

I109= [【expression -> . add_expression 】【expression -> . add_expression > add_expression 】【expression -> . add_expression < add_expression 】【expression -> . add_expression == add_expression 】【expression -> . add_expression >= add_expression 】【expression -> . add_expression <= add_expression 】【expression -> . add_expression != add_expression 】【add_expression -> . item 】【add_expression -> . item + add_expression 】【add_expression -> . item - add_expression 】【item -> . factor 】【item -> . factor * item 】【item -> . factor / item 】【factor -> . NUM 】【factor -> . ( expression ) 】【factor -> . ID ( argument_list ) 】【factor -> . ID 】【argument_list -> . 】【argument_list -> . expression 】【argument_list -> . expression , argument_list 】【argument_list -> expression , . argument_list 】【factor -> . array 】【array -> . ID index_list 】]

I110= [【A -> . 】【while_sentence -> while M ( expression ) . A sentence_block 】]

I111= [【sentence_block -> . { inner_declare sentence_list } 】【if_sentence -> if ( expression ) A . sentence_block 】【if_sentence -> if ( expression ) A . sentence_block N else M A sentence_block 】]

I112= [【argument_list -> expression , argument_list . 】]

I113= [【sentence_block -> . { inner_declare sentence_list } 】【while_sentence -> while M ( expression ) A . sentence_block 】]

I114= [【if_sentence -> if ( expression ) A sentence_block . 】【if_sentence -> if ( expression ) A sentence_block . N else M A sentence_block 】【N -> . 】]

I115= [【while_sentence -> while M ( expression ) A sentence_block . 】]

I116= [【if_sentence -> if ( expression ) A sentence_block N . else M A sentence_block 】]

I117= [【if_sentence -> if ( expression ) A sentence_block N else . M A sentence_block 】【M -> . 】]

I118= [【A -> . 】【if_sentence -> if ( expression ) A sentence_block N else M . A sentence_block 】]

I119= [【sentence_block -> . { inner_declare sentence_list } 】【if_sentence -> if ( expression ) A sentence_block N else M A . sentence_block 】]

I120= [【if_sentence -> if ( expression ) A sentence_block N else M A sentence_block . 】]

